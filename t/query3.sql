pragma journal_mode=wal;
begin exclusive;

drop view consts;
drop view invokes;
drop view method_ops;
drop view class_ops;
drop view class_methods;
drop view method_class;
drop table class_class_name;
drop table method_method_name;
drop table method_qualname;
drop view api_calls;
drop table api_calls_snap;
drop view method_callees;
drop table method_callees_snap;
drop view method_callgraphs;
drop view op_reg_influences;
drop table op_reg_influence_mode;

-- extract constant point (thus register write)
create view consts as select * from op_vecs where t='id' and v like 'const-%';

-- extract invocation points (thus register ref)
create view invokes as select * from op_vecs where (t='id' and v like 'invoke-%');

-- views
create view method_ops as select ops_method.method as method, ops.op as op, ops.t as t, ops.v as v from ops join ops_method using (op);
create view class_ops as select ops_class.class as class, ops.op as op, ops.t as t, ops.v as v from ops join ops_class using (op);
create view class_methods as select ops_class.class as class,ops_method.method as method from ops_class join ops_method on (ops_method.op=ops_method.method and ops_method.method=ops_class.op);
create view method_class as select A.method as method, B.class as class from (select distinct method from ops_method) as A join ops_class as B on (B.op=A.method);

-- concrete tables
create table class_class_name(class integer primary key, class_name varchar not null unique);
insert into class_class_name select op as class, coalesce(v9,v8,v7,v6,v5,v4,v3,v2,v1,v) as class_name from op_vecs where t='directive' and v='class';

create table method_method_name (method integer primary key, method_name varchar not null);
insert into method_method_name select method, (case when name='constructor' then '' else name end||sig) as method_name from (select method, (select v from ops where op=sigop) as sig, (select v from ops where op=sigop-1) as name from (select op as method, coalesce(op9,op8,op7,op6,op5,op4,op3,op2,op1,op) as sigop from op_vecs where t='directive' and v='method') as A) as AA;

create table method_qualname (method integer primary key, qualname varchar not null);
insert into method_qualname select method, (class_name||'->'||method_name) as qualname from class_methods join class_class_name using (class) join method_method_name using (method);
create index method_qualname_qualname on method_qualname(qualname);

-- API calls
create view api_calls as select invokes.op as op, ops_method.method as method, (case when invokes.t1='reflike' then invokes.v1 else invokes.v2 end) as qualname from ops_method join invokes using (op) left join method_qualname on ((case when invokes.t1='reflike' then invokes.v1 else invokes.v2 end)=qualname) where method_qualname.method is null;
create table api_calls_snap (op integer primary key, method integer not null, qualname varchar not null);
insert into api_calls_snap select * from api_calls;
create index api_calls_snap_method on api_calls_snap(method);

-- finds which op is calling given method
--select op_vecs.* from ops_p join (select op as p from ops where v like 'Landroid/util/Log;%') using (p) join op_vecs using (op);

-- extract call graph
create view method_callees as select invokes.op as op, ops_method.method as method, method_qualname.method as callee from ops_method join invokes using (op) join method_qualname on ((case when invokes.t1='reflike' then invokes.v1 else invokes.v2 end)=qualname);
create table method_callees_snap (op integer primary key, method integer not null, callee integer not null);
insert into method_callees_snap select * from method_callees;
create index method_callees_snap_method on method_callees_snap(method);

create view method_callgraphs as select distinct c1.method as method,c1.callee as callee1,c2.callee as callee2,c3.callee as callee3,c4.callee as callee4,c5.callee as callee5,c6.callee as callee6,c7.callee as callee7,c8.callee as callee8,c9.callee as callee9,ca.callee as calleea from method_callees_snap as c1 left join method_callees_snap as c2 on (c1.callee=c2.method) left join method_callees_snap as c3 on (c2.callee=c3.method) left join method_callees_snap as c4 on (c3.callee=c4.method) left join method_callees_snap as c5 on (c4.callee=c5.method) left join method_callees_snap as c6 on (c5.callee=c6.method) left join method_callees_snap as c7 on (c6.callee=c7.method) left join method_callees_snap as c8 on (c7.callee=c8.method) left join method_callees_snap as c9 on (c8.callee=c9.method) left join method_callees_snap as ca on (c9.callee=ca.method);

-- extract register write

create view op_reg_influences as select referer.op as op, ops_p.idx as idx, referer.v as insn, ops.v as reg from ops join ops_p on (ops.op=ops_p.p) join ops as referer on (referer.op=ops_p.op) where ops.t in ('reg', 'multireg');

create table op_reg_influence_mode (insn varchar not null, idx integer not null, ref boolean not null, mod boolean not null, unique (insn, idx));
create index op_reg_influence_mode_insn on op_reg_influence_mode (insn);
insert into op_reg_influence_mode(insn, idx, ref, mod)
  values
    --('nop', 0, 0, 0),
    ('move', 0, 0, 1),
    ('move', 1, 1, 0),
    ('move/from16', 0, 0, 1),
    ('move/from16', 1, 1, 0),
    ('move-wide', 0, 0, 1),
    ('move-wide', 1, 1, 0),
    ('move-wide/from16', 0, 0, 1),
    ('move-wide/from16', 1, 1, 0),
    ('move-object', 0, 0, 1),
    ('move-object', 1, 1, 0),
    ('move-object/from16', 0, 0, 1),
    ('move-object/from16', 1, 1, 0),
    ('move-result', 0, 0, 1),
    ('move-result', -1, 1, 0),
    ('move-result-wide', 0, 0, 1),
    ('move-result-wide', -1, 1, 0),
    ('move-result-object', 0, 0, 1),
    ('move-result-object', -1, 1, 0),
    ('move-exception', 0, 0, 1),
    --('return-void', 0, 0, 0),
    --('return', 0, 1, 0),
    ('return', -1, 0, 1),
    --('return-wide', 0, 1, 0),
    ('return-wide', -1, 0, 1),
    --('return-object', 0, 1, 0),
    ('return-object', -1, 0, 1),
    ('const/4', 0, 0, 1),
    ('const/16', 0, 0, 1),
    ('const', 0, 0, 1),
    ('const/high16', 0, 0, 1),
    ('const-wide/16', 0, 0, 1),
    ('const-wide/32', 0, 0, 1),
    ('const-wide', 0, 0, 1),
    ('const-wide/high16', 0, 0, 1),
    ('const-string', 0, 0, 1),
    ('const-string/jumbo', 0, 0, 1),
    ('const-class', 0, 0, 1),
    --('monitor-enter', 0, 1, 0),
    --('monitor-exit', 0, 1, 0),
    --('check-cast', 0, 1, 0),
    --('instance-of', 0, 0, 1),
    --('instance-of', 1, 1, 0),
    ('array-length', 0, 0, 1),
    ('array-length', 1, 1, 0),
    ('new-instance', 0, 0, 1),
    ('new-array', 0, 0, 1),
    --('filled-new-array', 0, 0, 0),
    --('filled-new-array/range', 0, 0, 0),
    --('fill-array-data', 0, 0, 0),
    --('throw', 0, 1, 0),
    --('goto', 0, 0, 0),
    --('goto/16', 0, 0, 0),
    --('goto/32', 0, 0, 0),
    --('packed-switch', 0, 1, 0),
    --('sparse-switch', 0, 1, 0),
    ('cmpl-float', 0, 0, 1),
    ('cmpl-float', 1, 1, 0),
    ('cmpl-float', 2, 1, 0),
    ('cmpg-float', 0, 0, 1),
    ('cmpg-float', 1, 1, 0),
    ('cmpg-float', 2, 1, 0),
    ('cmpl-double', 0, 0, 1),
    ('cmpl-double', 1, 1, 0),
    ('cmpl-double', 2, 1, 0),
    ('cmpg-double', 0, 0, 1),
    ('cmpg-double', 1, 1, 0),
    ('cmpg-double', 2, 1, 0),
    ('cmp-long', 0, 0, 1),
    ('cmp-long', 1, 1, 0),
    ('cmp-long', 2, 1, 0),
    ('if-eq', 0, 1, 0),
    ('if-eq', 1, 1, 0),
    ('if-ne', 0, 1, 0),
    ('if-ne', 1, 1, 0),
    ('if-lt', 0, 1, 0),
    ('if-lt', 1, 1, 0),
    ('if-ge', 0, 1, 0),
    ('if-ge', 1, 1, 0),
    ('if-gt', 0, 1, 0),
    ('if-gt', 1, 1, 0),
    ('if-le', 0, 1, 0),
    ('if-le', 1, 1, 0),
    ('if-eqz', 0, 1, 0),
    ('if-nez', 0, 1, 0),
    ('if-ltz', 0, 1, 0),
    ('if-gez', 0, 1, 0),
    ('if-gtz', 0, 1, 0),
    ('if-lez', 0, 1, 0),
    ('aget', 0, 0, 1),
    ('aget', 1, 1, 0),
    ('aget', 2, 1, 0),
    ('aget-wide', 0, 0, 1),
    ('aget-wide', 1, 1, 0),
    ('aget-wide', 2, 1, 0),
    ('aget-object', 0, 0, 1),
    ('aget-object', 1, 1, 0),
    ('aget-object', 2, 1, 0),
    ('aget-boolean', 0, 0, 1),
    ('aget-boolean', 1, 1, 0),
    ('aget-boolean', 2, 1, 0),
    ('aget-byte', 0, 0, 1),
    ('aget-byte', 1, 1, 0),
    ('aget-byte', 2, 1, 0),
    ('aget-char', 0, 0, 1),
    ('aget-char', 1, 1, 0),
    ('aget-char', 2, 1, 0),
    ('aget-short', 0, 0, 1),
    ('aget-short', 1, 1, 0),
    ('aget-short', 2, 1, 0),
    ('aput', 0, 1, 0),
    ('aput', 1, 1, 0),
    ('aput', 2, 1, 0),
    ('aput-wide', 0, 1, 0),
    ('aput-wide', 1, 1, 0),
    ('aput-wide', 2, 1, 0),
    ('aput-object', 0, 1, 0),
    ('aput-object', 1, 1, 0),
    ('aput-object', 2, 1, 0),
    ('aput-boolean', 0, 1, 0),
    ('aput-boolean', 1, 1, 0),
    ('aput-boolean', 2, 1, 0),
    ('aput-byte', 0, 1, 0),
    ('aput-byte', 1, 1, 0),
    ('aput-byte', 2, 1, 0),
    ('aput-char', 0, 1, 0),
    ('aput-char', 1, 1, 0),
    ('aput-char', 2, 1, 0),
    ('aput-short', 0, 1, 0),
    ('aput-short', 1, 1, 0),
    ('aput-short', 2, 1, 0),
    ('iget', 0, 0, 1),
    ('iget', 1, 1, 0),
    ('iget-wide', 0, 0, 1),
    ('iget-wide', 1, 1, 0),
    ('iget-object', 0, 0, 1),
    ('iget-object', 1, 1, 0),
    ('iget-boolean', 0, 0, 1),
    ('iget-boolean', 1, 1, 0),
    ('iget-byte', 0, 0, 1),
    ('iget-byte', 1, 1, 0),
    ('iget-char', 0, 0, 1),
    ('iget-char', 1, 1, 0),
    ('iget-short', 0, 0, 1),
    ('iget-short', 1, 1, 0),
    ('iput', 0, 1, 0),
    ('iput', 1, 1, 0),
    ('iput-wide', 0, 1, 0),
    ('iput-wide', 1, 1, 0),
    ('iput-object', 0, 1, 0),
    ('iput-object', 1, 1, 0),
    ('iput-boolean', 0, 1, 0),
    ('iput-boolean', 1, 1, 0),
    ('iput-byte', 0, 1, 0),
    ('iput-byte', 1, 1, 0),
    ('iput-char', 0, 1, 0),
    ('iput-char', 1, 1, 0),
    ('iput-short', 0, 1, 0),
    ('iput-short', 1, 1, 0),
    ('sget', 0, 0, 1),
    ('sget-wide', 0, 0, 1),
    ('sget-object', 0, 0, 1),
    ('sget-boolean', 0, 0, 1),
    ('sget-byte', 0, 0, 1),
    ('sget-char', 0, 0, 1),
    ('sget-short', 0, 0, 1),
    ('sput', 0, 1, 0),
    ('sput-wide', 0, 1, 0),
    ('sput-object', 0, 1, 0),
    ('sput-boolean', 0, 1, 0),
    ('sput-byte', 0, 1, 0),
    ('sput-char', 0, 1, 0),
    ('sput-short', 0, 1, 0),
    ('invoke-super', 0, 1, 0),
    ('invoke-super', -1, 0, 1),
    ('invoke-virtual', 0, 1, 0),
    ('invoke-virtual', -1, 0, 1),
    ('invoke-direct', 0, 1, 0),
    ('invoke-direct', -1, 0, 1),
    ('invoke-static', 0, 1, 0),
    ('invoke-static', -1, 0, 1),
    ('invoke-interface', 0, 1, 0),
    ('invoke-interface', -1, 0, 1),
    ('invoke-virtual/range', 0, 1, 0),
    ('invoke-virtual/range', -1, 0, 1),
    ('invoke-super/range', 0, 1, 0),
    ('invoke-super/range', -1, 0, 1),
    ('invoke-direct/range', 0, 1, 0),
    ('invoke-direct/range', -1, 0, 1),
    ('invoke-static/range', 0, 1, 0),
    ('invoke-static/range', -1, 0, 1),
    ('invoke-interface/range', 0, 1, 0),
    ('invoke-interface/range', -1, 0, 1),
    ('neg-int', 0, 0, 1),
    ('neg-int', 1, 1, 0),
    ('not-int', 0, 0, 1),
    ('not-int', 1, 1, 0),
    ('neg-long', 0, 0, 1),
    ('neg-long', 1, 1, 0),
    ('not-long', 0, 0, 1),
    ('not-long', 1, 1, 0),
    ('neg-float', 0, 0, 1),
    ('neg-float', 1, 1, 0),
    ('neg-double', 0, 0, 1),
    ('neg-double', 1, 1, 0),
    ('int-to-long', 0, 0, 1),
    ('int-to-long', 1, 1, 0),
    ('int-to-float', 0, 0, 1),
    ('int-to-float', 1, 1, 0),
    ('int-to-double', 0, 0, 1),
    ('int-to-double', 1, 1, 0),
    ('long-to-int', 0, 0, 1),
    ('long-to-int', 1, 1, 0),
    ('long-to-float', 0, 0, 1),
    ('long-to-float', 1, 1, 0),
    ('long-to-double', 0, 0, 1),
    ('long-to-double', 1, 1, 0),
    ('float-to-int', 0, 0, 1),
    ('float-to-int', 1, 1, 0),
    ('float-to-long', 0, 0, 1),
    ('float-to-long', 1, 1, 0),
    ('float-to-double', 0, 0, 1),
    ('float-to-double', 1, 1, 0),
    ('double-to-int', 0, 0, 1),
    ('double-to-int', 1, 1, 0),
    ('double-to-long', 0, 0, 1),
    ('double-to-long', 1, 1, 0),
    ('double-to-float', 0, 0, 1),
    ('double-to-float', 1, 1, 0),
    ('int-to-byte', 0, 0, 1),
    ('int-to-byte', 1, 1, 0),
    ('int-to-char', 0, 0, 1),
    ('int-to-char', 1, 1, 0),
    ('int-to-short', 0, 0, 1),
    ('int-to-short', 1, 1, 0),
    ('add-int', 0, 0, 1),
    ('add-int', 1, 1, 0),
    ('add-int', 2, 1, 0),
    ('sub-int', 0, 0, 1),
    ('sub-int', 1, 1, 0),
    ('sub-int', 2, 1, 0),
    ('mul-int', 0, 0, 1),
    ('mul-int', 1, 1, 0),
    ('mul-int', 2, 1, 0),
    ('div-int', 0, 0, 1),
    ('div-int', 1, 1, 0),
    ('div-int', 2, 1, 0),
    ('rem-int', 0, 0, 1),
    ('rem-int', 1, 1, 0),
    ('rem-int', 2, 1, 0),
    ('and-int', 0, 0, 1),
    ('and-int', 1, 1, 0),
    ('and-int', 2, 1, 0),
    ('or-int', 0, 0, 1),
    ('or-int', 1, 1, 0),
    ('or-int', 2, 1, 0),
    ('xor-int', 0, 0, 1),
    ('xor-int', 1, 1, 0),
    ('xor-int', 2, 1, 0),
    ('shl-int', 0, 0, 1),
    ('shl-int', 1, 1, 0),
    ('shl-int', 2, 1, 0),
    ('shr-int', 0, 0, 1),
    ('shr-int', 1, 1, 0),
    ('shr-int', 2, 1, 0),
    ('ushr-int', 0, 0, 1),
    ('ushr-int', 1, 1, 0),
    ('ushr-int', 2, 1, 0),
    ('add-long', 0, 0, 1),
    ('add-long', 1, 1, 0),
    ('add-long', 2, 1, 0),
    ('sub-long', 0, 0, 1),
    ('sub-long', 1, 1, 0),
    ('sub-long', 2, 1, 0),
    ('mul-long', 0, 0, 1),
    ('mul-long', 1, 1, 0),
    ('mul-long', 2, 1, 0),
    ('div-long', 0, 0, 1),
    ('div-long', 1, 1, 0),
    ('div-long', 2, 1, 0),
    ('rem-long', 0, 0, 1),
    ('rem-long', 1, 1, 0),
    ('rem-long', 2, 1, 0),
    ('and-long', 0, 0, 1),
    ('and-long', 1, 1, 0),
    ('and-long', 2, 1, 0),
    ('or-long', 0, 0, 1),
    ('or-long', 1, 1, 0),
    ('or-long', 2, 1, 0),
    ('xor-long', 0, 0, 1),
    ('xor-long', 1, 1, 0),
    ('xor-long', 2, 1, 0),
    ('shl-long', 0, 0, 1),
    ('shl-long', 1, 1, 0),
    ('shl-long', 2, 1, 0),
    ('shr-long', 0, 0, 1),
    ('shr-long', 1, 1, 0),
    ('shr-long', 2, 1, 0),
    ('ushr-long', 0, 0, 1),
    ('ushr-long', 1, 1, 0),
    ('ushr-long', 2, 1, 0),
    ('add-float', 0, 0, 1),
    ('add-float', 1, 1, 0),
    ('add-float', 2, 1, 0),
    ('sub-float', 0, 0, 1),
    ('sub-float', 1, 1, 0),
    ('sub-float', 2, 1, 0),
    ('mul-float', 0, 0, 1),
    ('mul-float', 1, 1, 0),
    ('mul-float', 2, 1, 0),
    ('div-float', 0, 0, 1),
    ('div-float', 1, 1, 0),
    ('div-float', 2, 1, 0),
    ('rem-float', 0, 0, 1),
    ('rem-float', 1, 1, 0),
    ('rem-float', 2, 1, 0),
    ('add-double', 0, 0, 1),
    ('add-double', 1, 1, 0),
    ('add-double', 2, 1, 0),
    ('sub-double', 0, 0, 1),
    ('sub-double', 1, 1, 0),
    ('sub-double', 2, 1, 0),
    ('mul-double', 0, 0, 1),
    ('mul-double', 1, 1, 0),
    ('mul-double', 2, 1, 0),
    ('div-double', 0, 0, 1),
    ('div-double', 1, 1, 0),
    ('div-double', 2, 1, 0),
    ('rem-double', 0, 0, 1),
    ('rem-double', 1, 1, 0),
    ('rem-double', 2, 1, 0),
    ('add-int/2addr', 0, 1, 1),
    ('add-int/2addr', 1, 1, 0),
    ('sub-int/2addr', 0, 1, 1),
    ('sub-int/2addr', 1, 1, 0),
    ('mul-int/2addr', 0, 1, 1),
    ('mul-int/2addr', 1, 1, 0),
    ('div-int/2addr', 0, 1, 1),
    ('div-int/2addr', 1, 1, 0),
    ('rem-int/2addr', 0, 1, 1),
    ('rem-int/2addr', 1, 1, 0),
    ('and-int/2addr', 0, 1, 1),
    ('and-int/2addr', 1, 1, 0),
    ('or-int/2addr', 0, 1, 1),
    ('or-int/2addr', 1, 1, 0),
    ('xor-int/2addr', 0, 1, 1),
    ('xor-int/2addr', 1, 1, 0),
    ('shl-int/2addr', 0, 1, 1),
    ('shl-int/2addr', 1, 1, 0),
    ('shr-int/2addr', 0, 1, 1),
    ('shr-int/2addr', 1, 1, 0),
    ('ushr-int/2addr', 0, 1, 1),
    ('ushr-int/2addr', 1, 1, 0),
    ('add-long/2addr', 0, 1, 1),
    ('add-long/2addr', 1, 1, 0),
    ('sub-long/2addr', 0, 1, 1),
    ('sub-long/2addr', 1, 1, 0),
    ('mul-long/2addr', 0, 1, 1),
    ('mul-long/2addr', 1, 1, 0),
    ('div-long/2addr', 0, 1, 1),
    ('div-long/2addr', 1, 1, 0),
    ('rem-long/2addr', 0, 1, 1),
    ('rem-long/2addr', 1, 1, 0),
    ('and-long/2addr', 0, 1, 1),
    ('and-long/2addr', 1, 1, 0),
    ('or-long/2addr', 0, 1, 1),
    ('or-long/2addr', 1, 1, 0),
    ('xor-long/2addr', 0, 1, 1),
    ('xor-long/2addr', 1, 1, 0),
    ('shl-long/2addr', 0, 1, 1),
    ('shl-long/2addr', 1, 1, 0),
    ('shr-long/2addr', 0, 1, 1),
    ('shr-long/2addr', 1, 1, 0),
    ('ushr-long/2addr', 0, 1, 1),
    ('ushr-long/2addr', 1, 1, 0),
    ('add-float/2addr', 0, 1, 1),
    ('add-float/2addr', 1, 1, 0),
    ('sub-float/2addr', 0, 1, 1),
    ('sub-float/2addr', 1, 1, 0),
    ('mul-float/2addr', 0, 1, 1),
    ('mul-float/2addr', 1, 1, 0),
    ('div-float/2addr', 0, 1, 1),
    ('div-float/2addr', 1, 1, 0),
    ('rem-float/2addr', 0, 1, 1),
    ('rem-float/2addr', 1, 1, 0),
    ('add-double/2addr', 0, 1, 1),
    ('add-double/2addr', 1, 1, 0),
    ('sub-double/2addr', 0, 1, 1),
    ('sub-double/2addr', 1, 1, 0),
    ('mul-double/2addr', 0, 1, 1),
    ('mul-double/2addr', 1, 1, 0),
    ('div-double/2addr', 0, 1, 1),
    ('div-double/2addr', 1, 1, 0),
    ('rem-double/2addr', 0, 1, 1),
    ('rem-double/2addr', 1, 1, 0),
    ('add-int/lit16', 0, 0, 1),
    ('add-int/lit16', 1, 1, 0),
    ('rsub-int/lit16', 0, 0, 1),
    ('rsub-int/lit16', 1, 1, 0),
    ('mul-int/lit16', 0, 0, 1),
    ('mul-int/lit16', 1, 1, 0),
    ('div-int/lit16', 0, 0, 1),
    ('div-int/lit16', 1, 1, 0),
    ('rem-int/lit16', 0, 0, 1),
    ('rem-int/lit16', 1, 1, 0),
    ('and-int/lit16', 0, 0, 1),
    ('and-int/lit16', 1, 1, 0),
    ('or-int/lit16', 0, 0, 1),
    ('or-int/lit16', 1, 1, 0),
    ('xor-int/lit16', 0, 0, 1),
    ('xor-int/lit16', 1, 1, 0),
    ('add-int/lit8', 0, 0, 1),
    ('add-int/lit8', 1, 1, 0),
    ('rsub-int/lit8', 0, 0, 1),
    ('rsub-int/lit8', 1, 1, 0),
    ('mul-int/lit8', 0, 0, 1),
    ('mul-int/lit8', 1, 1, 0),
    ('div-int/lit8', 0, 0, 1),
    ('div-int/lit8', 1, 1, 0),
    ('rem-int/lit8', 0, 0, 1),
    ('rem-int/lit8', 1, 1, 0),
    ('and-int/lit8', 0, 0, 1),
    ('and-int/lit8', 1, 1, 0),
    ('or-int/lit8', 0, 0, 1),
    ('or-int/lit8', 1, 1, 0),
    ('xor-int/lit8', 0, 0, 1),
    ('xor-int/lit8', 1, 1, 0),
    ('shl-int/lit8', 0, 0, 1),
    ('shl-int/lit8', 1, 1, 0),
    ('shr-int/lit8', 0, 0, 1),
    ('shr-int/lit8', 1, 1, 0),
    ('ushr-int/lit8', 0, 0, 1),
    ('ushr-int/lit8', 1, 1, 0);


-- select A.op,A.v,A.v1,A.v2,'<----',B.op,B.v,B.v1,B.v2 from (select * from ops_method join op_vecs using (op) join op_reg_influence_mode as T on (T.insn=op_vecs.v and op_vecs.t='id' and T.idx=0 and T.ref) where method=245) as A left join (select * from ops_method join op_vecs using (op) join op_reg_influence_mode as TT on (TT.insn=op_vecs.v and op_vecs.t='id' and TT.idx=0 and TT.mod) where method=245 order by op desc) as B on (A.op>B.op);

-- extract register ref

commit;
